name: Playwright Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: "0 2 * * *"

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        node-version: [18, 20]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Run Playwright tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          CI: true
          BASE_URL: ${{ secrets.BASE_URL || 'http://localhost:3000' }}
          API_BASE_URL: ${{ secrets.API_BASE_URL || 'http://localhost:3000/api' }}

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}-node${{ matrix.node-version }}
          path: playwright-report/
          retention-days: 30

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}-node${{ matrix.node-version }}
          path: test-results/
          retention-days: 30

  api-tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install

      - name: Run API tests
        run: npx playwright test --project=api
        env:
          CI: true
          API_BASE_URL: ${{ secrets.API_BASE_URL || 'http://localhost:3000/api' }}

      - name: Upload API Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: test-results/
          retention-days: 30

  mobile-tests:
    timeout-minutes: 45
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Mobile tests
        run: npx playwright test --project="Mobile Chrome" --project="Mobile Safari" --project="iPad"
        env:
          CI: true
          BASE_URL: ${{ secrets.BASE_URL || 'http://localhost:3000' }}

      - name: Upload Mobile Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-test-results
          path: test-results/
          retention-days: 30

  visual-tests:
    timeout-minutes: 45
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Run Visual tests
        run: npx playwright test tests/visual --project=chromium
        env:
          CI: true
          BASE_URL: ${{ secrets.BASE_URL || 'http://localhost:3000' }}

      - name: Upload Visual Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-test-results
          path: test-results/
          retention-days: 30

      - name: Upload Screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: screenshots
          path: screenshots/
          retention-days: 30

  postman-tests:
    timeout-minutes: 20
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run Postman tests with Newman
        run: npm run postman
        env:
          API_BASE_URL: ${{ secrets.API_BASE_URL || 'http://localhost:3000/api' }}
          API_KEY: ${{ secrets.API_KEY }}

      - name: Upload Newman Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: newman-results
          path: newman-results/
          retention-days: 30

  merge-reports:
    if: always()
    needs: [test, api-tests, mobile-tests, visual-tests]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Merge HTML reports
        run: |
          mkdir -p merged-report
          # This would involve custom logic to merge multiple HTML reports
          echo "Merged report generation would go here"

      - name: Upload Merged Report
        uses: actions/upload-artifact@v4
        with:
          name: merged-test-report
          path: merged-report/
          retention-days: 30

  notify:
    if: always()
    needs: [test, api-tests, mobile-tests, visual-tests, postman-tests]
    runs-on: ubuntu-latest

    steps:
      - name: Notify on failure
        if: failure()
        run: |
          echo "Tests failed! Notification logic would go here."
          # You could integrate with Slack, Teams, email, etc.

      - name: Notify on success
        if: success()
        run: |
          echo "All tests passed! ðŸŽ‰"
